!function(t){var e={};function i(n){if(e[n])return e[n].exports;var a=e[n]={i:n,l:!1,exports:{}};return t[n].call(a.exports,a,a.exports,i),a.l=!0,a.exports}i.m=t,i.c=e,i.d=function(t,e,n){i.o(t,e)||Object.defineProperty(t,e,{enumerable:!0,get:n})},i.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})},i.t=function(t,e){if(1&e&&(t=i(t)),8&e)return t;if(4&e&&"object"==typeof t&&t&&t.__esModule)return t;var n=Object.create(null);if(i.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:t}),2&e&&"string"!=typeof t)for(var a in t)i.d(n,a,function(e){return t[e]}.bind(null,a));return n},i.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return i.d(e,"a",e),e},i.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},i.p="",i(i.s=1)}([function(t,e,i){t.exports=i.p+"7761107bf2a61c49887ec7b257be9056.png"},function(t,e,i){"use strict";i.r(e);var n,a=function(){function t(){var t=this;this.updateFunctions=[],this.isRunning=!1,this.addUpdateFunction=function(e){t.updateFunctions.push(e)},this.removeUpdateFunction=function(e){t.updateFunctions.splice(t.updateFunctions.indexOf(e),1)},this.setFps=function(e){t.fps=e,t.fpsInterval=1e3/t.fps},this.animationLoop=function(){t.isRunning&&requestAnimationFrame(t.animationLoop);var e=Date.now(),i=e-t.lastFrameTime;if(i>t.fpsInterval){t.lastFrameTime=e;for(var n=i/1e3,a=0,r=t.updateFunctions;a<r.length;a++){(0,r[a])(n)}}},this.setFps(30),this.play(),document.addEventListener("keyup",function(e){80==e.keyCode&&t.playPause()})}return t.prototype.play=function(){this.isRunning||(console.log("play"),this.isRunning=!0,this.lastFrameTime=Date.now(),this.animationLoop())},t.prototype.pause=function(){this.isRunning&&(console.log("pause"),this.isRunning=!1)},t.prototype.playPause=function(){this.isRunning?this.pause():this.play()},t}(),r=function(){return function(t){this.audioCtx=t}}(),o=(n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(t,e)},function(t,e){function i(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(i.prototype=e.prototype,new i)}),s=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.getAudioNode=function(){return e.analyserNode||e.initialize(),e.analyserNode},e}return o(e,t),e.prototype.initialize=function(){this.analyserNode=this.audioCtx.createAnalyser(),this.analyserNode.fftSize=32,this.analyserNode.smoothingTimeConstant=.9,this.bufferLength=this.analyserNode.frequencyBinCount,this.dataArray=new Uint8Array(this.bufferLength)},e.prototype.getSpectrum=function(){return this.analyserNode?(this.analyserNode.getByteFrequencyData(this.dataArray),this.dataArray):new Uint8Array(0)},e.prototype.getWave=function(){return this.analyserNode?(this.analyserNode.getByteTimeDomainData(this.dataArray),this.dataArray):new Uint8Array(0)},e}(r),u=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),h=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.getAudioNode=function(){return e.audioCtx.destination},e}return u(e,t),e}(r),d=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),c=function(t){function e(e,i){var n=t.call(this,e)||this;return n.getAudioNode=function(){return n.source||n.initialize(),n.source},n.url=i,n}return d(e,t),e.prototype.initialize=function(){var t=this;this.audio=document.createElement("audio"),this.audio.controls=!0,this.audio.src=this.url,this.source=this.audioCtx.createMediaElementSource(this.audio),setTimeout(function(){t.audio.play()},5e3)},e}(r),l=function(){var t=function(e,i){return(t=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var i in e)e.hasOwnProperty(i)&&(t[i]=e[i])})(e,i)};return function(e,i){function n(){this.constructor=e}t(e,i),e.prototype=null===i?Object.create(i):(n.prototype=i.prototype,new n)}}(),p=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.getAudioNode=function(){return e.source||e.initialize(),e.source},e}return l(e,t),e.prototype.initialize=function(){var t=this;navigator.mediaDevices.getUserMedia({audio:!0,video:!1}).then(function(e){t.source=t.audioCtx.createMediaStreamSource(e)}).catch(function(t){alert("error1923012258")})},e}(r),f=function(){function t(){var t=this;this.playUrl=function(e){t.sourceNode=new c(t.audioCtx,e),"running"===t.audioCtx.state&&t.buildGraph()},this.playStream=function(){t.sourceNode=new p(t.audioCtx),"running"===t.audioCtx.state&&t.buildGraph()},this.documentClick=function(){"suspended"===t.audioCtx.state&&(t.audioCtx.resume(),document.removeEventListener("click",t.documentClick))},this.audioContextStateChanged=function(){"running"===t.audioCtx.state&&(t.audioCtx.removeEventListener("statechange",t.audioContextStateChanged),t.buildGraph())},this.audioCtx=new AudioContext,this.audioCtx.addEventListener("statechange",this.audioContextStateChanged),"suspended"===this.audioCtx.state&&(document.addEventListener("click",this.documentClick),console.log("Audio context is suspended. Click the dom to make it running.")),this.analyzerNode=new s(this.audioCtx),this.destinationNode=new h(this.audioCtx)}return t.prototype.buildGraph=function(){var t=this;console.log("Building audio graph."),this.sourceNode.getAudioNode()?(this.sourceNode.getAudioNode().disconnect(),this.analyzerNode.getAudioNode().disconnect(),this.destinationNode.getAudioNode().disconnect(),this.sourceNode.getAudioNode().connect(this.analyzerNode.getAudioNode()),this.analyzerNode.getAudioNode().connect(this.destinationNode.getAudioNode())):(console.log("Audio source not available. Waiting some time."),setTimeout(function(){t.buildGraph()},1e3))},t.prototype.getSpectrum=function(){return this.analyzerNode.getSpectrum()},t.prototype.getWave=function(){return this.analyzerNode.getWave()},t}(),g=function(){function t(){var t=this;this.drawFunctions=[],this.resize=function(){console.log("canvas.resize()"),t.canvas.width=t.canvas.clientWidth,t.canvas.height=t.canvas.clientHeight},this.draw=function(){for(var e=0,i=t.drawFunctions;e<i.length;e++){(0,i[e])(t.ctx,t.width,t.height)}},this.addDrawFunction=function(e){t.drawFunctions.push(e)},this.removeDrawFunction=function(e){t.drawFunctions.splice(t.drawFunctions.indexOf(e),1)}}return Object.defineProperty(t.prototype,"width",{get:function(){return this.canvas.width},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"height",{get:function(){return this.canvas.height},enumerable:!0,configurable:!0}),t.createFullScreen=function(){document.body.parentElement.style.height="100%",document.body.style.height="100%",document.body.style.margin="0",document.body.style.overflow="hidden";var e=document.createElement("canvas");document.body.appendChild(e),e.style.width="100%",e.style.height="100%";var i=new t;return i.canvas=e,i.ctx=e.getContext("2d"),window.addEventListener("resize",i.resize),i.resize(),i},t}(),m=i(0),y=i.n(m),v=function(){function t(t){var e=this;this.animation=t,this.limit=5,this.spawnWaiter=0,this.shootingStars=[],this.process=function(t,i,n,a){if(e.shootingStars.length<=e.limit&&e.spawnWaiter<=0){if(Math.random()*t>.9){var r=n/2-Math.cos(i)*n/1.5+(n*Math.random()-n/2),o=a/2-Math.sin(i)*n/1.5+(a*Math.random()-a/2);console.log("shooting star"),e.shootingStars.push({x:r,y:o,angle:i+Math.PI/16*Math.random()-Math.PI/32,speed:600+200*Math.random(),size:Math.round(3*Math.random())+2}),e.spawnWaiter=50}}else e.spawnWaiter--},this.update=function(t){for(var i=0;i<e.shootingStars.length;i++){var n=e.shootingStars[i];n.x+=Math.cos(n.angle)*t*n.speed,n.y+=Math.sin(n.angle)*t*n.speed}},this.draw=function(t,i,n){var a=[];t.fillStyle="white",t.strokeStyle="white",t.lineCap="round";for(var r=0;r<e.shootingStars.length;r++){for(var o=e.shootingStars[r],s=o.size;s>0;s-=.5)e.drawShootingStarPart(t,.5,o,s*s*s);t.arc(o.x,o.y,1,0,2*Math.PI),t.fill(),(o.x>3*i||o.x<2*-i||o.y>3*n||o.y<2*-n)&&a.push(r)}for(r=a.length-1;r>=0;r--){var u=a[r];e.shootingStars.splice(u,1)}},this.animation.addUpdateFunction(this.update)}return t.prototype.drawShootingStarPart=function(t,e,i,n){t.beginPath(),t.lineWidth=e,t.moveTo(i.x,i.y),t.lineTo(i.x-Math.cos(i.angle)*n,i.y-Math.sin(i.angle)*n),t.stroke()},t}(),w=function(){return function(){}}(),x=function(){function t(){}return t.changeFavicon=function(t){var e=document.createElement("link"),i=document.getElementById("dynamic-favicon");e.id="dynamic-favicon",e.rel="shortcut icon",e.href=t,i&&document.head.removeChild(i),document.head.appendChild(e)},t.getPixels=function(t){var e=[],i=document.createElement("canvas");i.width=1e3,i.height=200;var n=i.getContext("2d");n.fillStyle="black",n.fillRect(0,0,i.width,i.height),n.fillStyle="white",n.textAlign="left",n.textBaseline="top";n.font="50px Garamond",n.fillText(t,0,0);for(var a=n.measureText(t).width,r=n.getImageData(0,0,a,50),o=0;o<r.data.length;o+=4){var s=r.data[o],u=r.data[o+1],h=r.data[o+2];r.data[o+3];s+u+h>300&&e.push({x:o/4-Math.floor(o/4/r.width)*r.width,y:Math.floor(o/4/r.width)})}var d=new w;return d.pixels=e,d.width=a,d.height=50,d},t.colorImage=function(t,e){t.onload=function(){var i=document.createElement("canvas");i.width=t.naturalWidth,i.height=t.naturalHeight;var n=i.getContext("2d");n.drawImage(t,0,0);for(var a=n.getImageData(0,0,i.width,i.height),r=0;r<a.data.length;r+=4){var o=a.data[r],s=a.data[r+1],u=a.data[r+2];if(a.data[r+3]>.5&&o-s>50&&o-u>50){e=e;var h,d,c,l=.5,p=l*(1-Math.abs(e/60%2-1));e<60?(h=l,d=p,c=0):e<120?(h=p,d=l,c=0):e<180?(h=0,d=l,c=p):e<240?(h=0,d=p,c=l):e<300?(h=p,d=0,c=l):(h=l,d=0,c=p),h=255*(h+0),d=255*(d+0),c=255*(c+0),a.data[r]=h,a.data[r+1]=d,a.data[r+2]=c}}n.putImageData(a,0,0),t.src=i.toDataURL(),t.onload=function(){}}},t.colorImageAny=function(t,e){var i=document.createElement("canvas");i.width=t.naturalWidth,i.height=t.naturalHeight;var n=i.getContext("2d");n.drawImage(t,0,0);for(var a=n.getImageData(0,0,i.width,i.height),r=0;r<a.data.length;r+=4){a.data[r],a.data[r+1],a.data[r+2];if(a.data[r+3]>.5){e=e;var o,s,u,h=.5,d=h*(1-Math.abs(e/60%2-1));e<60?(o=h,s=d,u=0):e<120?(o=d,s=h,u=0):e<180?(o=0,s=h,u=d):e<240?(o=0,s=d,u=h):e<300?(o=d,s=0,u=h):(o=h,s=0,u=d),o=255*(o+0),s=255*(s+0),u=255*(u+0),a.data[r]=o,a.data[r+1]=s,a.data[r+2]=u}}n.putImageData(a,0,0),t.src=i.toDataURL()},t.getImageData=function(t,e){t.onload=function(){var i=document.createElement("canvas");i.width=t.naturalWidth,i.height=t.naturalHeight;var n=i.getContext("2d");n.drawImage(t,0,0),e(n.getImageData(0,0,i.width,i.height))}},t}(),S=(function(){function t(t,e,i,n){var a=this;this.animation=t,this.animationStart=i,this.endTime=n,this.animatedPixels=[],this.isInitialized=!1,this.isDeinitialized=!1,this.process=function(t,e,i){if(!a.isInitialized){a.isInitialized=!0;for(var n=0;n<a.pixels.pixels.length;n++)if(Math.random()>.5){var r=a.pixels.pixels[n],o=Math.random()*e,s=Math.random()*i;a.animatedPixels.push({startX:o,startY:s,x:o,y:s,targetX:e/2-a.pixels.width/2+r.x,targetY:i/4*3-a.pixels.height/2+r.y,startSize:0,size:0,targetSize:1.5*Math.random()+.5,animationDuration:4*Math.random()+2,animationStart:a.animationStart+Math.random()})}}if(a.endTime<=Date.now()/1e3&&!a.isDeinitialized){a.isDeinitialized=!0;for(n=0;n<a.animatedPixels.length;n++){var u=a.animatedPixels[n],h=Math.random()*e,d=Math.random()*i;a.animatedPixels[n]={startX:u.x,startY:u.y,x:u.x,y:u.y,targetX:h,targetY:d,startSize:u.size,size:u.size,targetSize:0,animationDuration:2*Math.random()+1.5,animationStart:Date.now()/1e3+Math.random()}}}},this.update=function(t){var e=Date.now()/1e3;if(e>=a.animationStart&&e<=a.endTime+10)for(var i=0;i<a.animatedPixels.length;i++){var n=a.animatedPixels[i];if(n.animationStart&&e>=n.animationStart){var r=a.isDeinitialized?b.easeOutQuart:b.easeInQuart,o=new S(n.animationStart,e,n.animationDuration,r);n.x=o.getValue(n.startX,n.targetX),n.y=o.getValue(n.startY,n.targetY),n.size=o.getValue(n.startSize,n.targetSize)}}},this.draw=function(t,e,i){if(Date.now()/1e3>=a.animationStart){t.strokeStyle="#a3d3ff",t.fillStyle="#13c3ff";for(var n=0;n<a.animatedPixels.length;n++){var r=a.animatedPixels[n];t.beginPath(),t.arc(r.x,r.y,r.size,0,2*Math.PI),t.fill()}}},this.animation.addUpdateFunction(this.update),this.pixels=x.getPixels(e);for(var r=0;r<this.pixels.pixels.length;r++)this.pixels.pixels[r].x*=2,this.pixels.pixels[r].y*=2;this.pixels.width*=2,this.pixels.height*=2}t.prototype.ease=function(t,e,i,n,a,r){var o=(e-t)/i;return n+r(o=o>1?1:o)/r(1)*(a-n)}}(),function(){return function(t,e,i,n){var a=this;this.getValue=function(t,e){return t+(e-t)*(a.scaledT/a.maxScaledT)};var r=(e-t)/i;r=r>1?1:r,this.scaledT=n(r),this.maxScaledT=n(1)}}()),b=function(){function t(){}return t.linear=function(t){return t},t.easeInQuad=function(t){return t*t},t.easeOutQuad=function(t){return t*(2-t)},t.easeInOutQuad=function(t){return t<.5?2*t*t:(4-2*t)*t-1},t.easeInCubic=function(t){return t*t*t},t.easeOutCubic=function(t){return--t*t*t+1},t.easeInOutCubic=function(t){return t<.5?4*t*t*t:(t-1)*(2*t-2)*(2*t-2)+1},t.easeInQuart=function(t){return t*t*t*t},t.easeOutQuart=function(t){return 1- --t*t*t*t},t.easeInOutQuart=function(t){return t<.5?8*t*t*t*t:1-8*--t*t*t*t},t.easeInQuint=function(t){return t*t*t*t*t},t.easeOutQuint=function(t){return 1+--t*t*t*t*t},t.easeInOutQuint=function(t){return t<.5?16*t*t*t*t*t:1+16*--t*t*t*t*t},t}(),M=function(){return function(t){var e=this;this.audioGraph=t,this.drawSpectrum=function(t,i,n){for(var a=e.audioGraph.getSpectrum(),r=a.length,o=i/r,s=0;s<r;s++){var u=a[s]/2;t.fillStyle="hsl("+(230-u/150*50)+", 100%, "+(u/150*50+20)+"%)",t.fillRect(s*o,n,.5*o,2*-u)}},this.drawWave=function(t,i,n){var a=e.audioGraph.getWave(),r=a.length;t.lineWidth=2,t.strokeStyle="rgb(150, 150, 150)",t.beginPath();for(var o=i/(r-1),s=0,u=0;u<r;u++){var h=a[u]/128*n/2;0===u?t.moveTo(s,h):t.lineTo(s,h),s+=o}t.stroke()},this.drawSpectrumArc=function(t,i,n){for(var a=e.audioGraph.getSpectrum(),r=a.length,o=0;o<r;o++){var s=2*Math.PI/r*o,u=50+a[o],h=Math.cos(s)*u,d=Math.sin(s)*u;t.beginPath(),t.moveTo(i/2,n/2),t.lineTo(i/2+h,n/2+d),t.strokeStyle="hsl("+(230-u/150*50)+", 100%, "+(u/150*50+20)+"%)",t.lineWidth=5,t.stroke()}},this.drawSpectrumArcV2=function(t,i,n){for(var a=e.audioGraph.getSpectrum(),r=a.length,o=0;o<r;o++){var s=2*Math.PI/r*o,u=2*Math.PI/r*(o+1),h=a[o];t.beginPath(),t.moveTo(i/2,n/2),t.arc(i/2,n/2,h,s,u),t.fillStyle="hsl("+(230-(h-100)/150*50)+", 100%, "+((h-100)/150*50+20)+"%)",t.fill()}}}}(),I=function(){function t(t,e,i){var n=this;this.audioGraph=t,this.canvas=e,this.animation=i,this.frequencyIndex=7,this.imageWidth=0,this.imageHeight=0,this.lowerBorder=0,this.upperBorder=.8,this.numberOfStars=1e3,this.inspiertyVisV3=function(t,e,i){var a=n.audioGraph.getSpectrum(),r=n.calculateRelDataValue(a[n.frequencyIndex]);n.shootingStarProcessor.process(r,n.angle,e,i),n.drawStars(t,e,i),t.fillStyle="rgba(0, 0, 0, "+(1-r/2-.4)+")",t.fillRect(0,0,e,i),n.shootingStarProcessor.draw(t,e,i),n.drawRelDataValue&&(t.fillStyle="white",t.fillRect(0,i,50,-i*r)),n.drawImage(e,i,t,r)},this.angle=.3*Math.PI,this.targetAngle=this.angle,this.clockwise=1,this.speed=4,this.targetSpeed=this.speed,this.stars=[],this.updateStars=function(t){n.angling(t),n.speeding(t);for(var e=0;e<n.stars.length;e++){var i=n.stars[e];i.x+=Math.cos(n.angle)*t*4,i.y+=Math.sin(n.angle)*t*4}},this.drawStars=function(t,e,i){for(;n.stars.length<n.numberOfStars;)n.addStar(e,i);if(Math.random()>.9)for(var a=0;a<Math.round(5*Math.random());a++)n.stars.splice(0,1);t.fillStyle="white";for(a=0;a<n.stars.length;a++){var r=n.stars[a];t.beginPath(),t.arc(r.x,r.y,r.size/2,0,2*Math.PI),t.fill(),r.x>e?r.x=r.x-e:r.x<0&&(r.x=r.x+e),r.y>i?r.y=r.y-i:r.y<0&&(r.y=r.y+i)}},this.inspiertyLogoImage=new Image,this.inspiertyLogoImage.src=y.a,this.shootingStarProcessor=new v(this.animation);var a=new M(this.audioGraph);console.log(window.location.search);var r=window.location.search.substr(1).split("&").map(function(t){return t.split("=")}),o=["fi - frequencyIndex - 7","lb - lowerBorder - 0","ub - upperBorder - 0.8","spec - spec","rel - drawRelDataValue","fps - fps - 30","nos - numberOfStars - 1000"];console.log("methods:");for(var s=0;s<o.length;s++){var u=o[s];console.log(u)}for(var h=0,d=r;h<d.length;h++){var c=d[h];switch(c[0]){case"fi":this.frequencyIndex=+c[1];break;case"lb":this.lowerBorder=+c[1];break;case"ub":this.upperBorder=+c[1];break;case"spec":this.canvas.addDrawFunction(a.drawSpectrum);break;case"rel":this.drawRelDataValue=!0;break;case"fps":this.animation.setFps(+c[1]);break;case"nos":this.numberOfStars=+c[1]}}this.animation.addUpdateFunction(this.updateStars),this.canvas.addDrawFunction(this.inspiertyVisV3)}return t.prototype.drawImage=function(t,e,i,n){var a,r;this.imageWidth||(this.inspiertyLogoImage.naturalWidth/this.inspiertyLogoImage.naturalHeight>t/e?(a=t,r=this.inspiertyLogoImage.naturalHeight/this.inspiertyLogoImage.naturalWidth*t):(a=this.inspiertyLogoImage.naturalWidth/this.inspiertyLogoImage.naturalHeight*e,r=e),this.imageWidth=.8*a,this.imageHeight=.8*r);var o=e/3-this.imageHeight/2;i.drawImage(this.inspiertyLogoImage,t/2-this.imageWidth/2,o,this.imageWidth,this.imageHeight),i.beginPath(),i.globalCompositeOperation="lighter";var s=t/2-this.imageWidth/2+.4872*this.imageWidth,u=o+.4105*this.imageHeight,h=.0494*this.imageHeight*(n/2+.7)+0;if(s&&u&&h){var d=i.createRadialGradient(s,u,0,s,u,h);d.addColorStop(0,"rgba(255, 255, 255, "+n/2+")"),d.addColorStop(1,"rgba(255, 255, 255, 0)"),i.fillStyle=d,i.arc(s,u,h,0,2*Math.PI),i.fill(),i.globalCompositeOperation="source-over"}},t.prototype.ease=function(t,e,i,n,a){var r=(e-t)/i;return r=r>1?1:r,n+b.easeInOutQuad(r)/b.easeInOutQuad(1)*(a-n)},t.prototype.addStar=function(t,e){this.stars.push({x:Math.random()*t,y:Math.random()*e,size:Math.random()*(t/600)+.4})},t.prototype.speeding=function(t){this.speed==this.targetSpeed?this.targetSpeed=10*Math.random()+2:this.speed>this.targetSpeed?(this.speed-=.1*t,this.speed<this.targetSpeed&&(this.speed=this.targetSpeed)):(this.speed+=.1*t,this.speed>this.targetSpeed&&(this.speed=this.targetSpeed))},t.prototype.angling=function(t){if(this.angle==this.targetAngle){var e=Math.random()*Math.PI-Math.PI/2;this.targetAngle+=e,this.clockwise=e<0?-1:1}else{var i=.06*t*this.clockwise;this.angle<=this.targetAngle&&this.angle+i>=this.targetAngle||this.angle>=this.targetAngle&&this.angle+i<=this.targetAngle?this.angle=this.targetAngle:this.angle+=.06*t*this.clockwise}},t.prototype.calculateRelDataValue=function(t){var e=t/255;return e<this.lowerBorder&&(e=this.lowerBorder),e>this.upperBorder&&(e=this.upperBorder),(e-this.lowerBorder)/(this.upperBorder-this.lowerBorder)},t}(),P=function(){function t(){this.preAnimation=function(t,e,i){t.clearRect(0,0,e,i)}}return t.prototype.run=function(){document.body.style.backgroundColor="black",this.canvas=g.createFullScreen(),this.animation=new a,this.animation.addUpdateFunction(this.canvas.draw),this.audioGraph=new f,this.audioGraph.playStream(),this.canvas.addDrawFunction(this.preAnimation);new I(this.audioGraph,this.canvas,this.animation)},t}();document.addEventListener("DOMContentLoaded",function(){(new P).run()},!1)}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,